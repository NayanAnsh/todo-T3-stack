// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//https://authjs.dev/reference/adapter/prisma
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Below Custom fields
  password      String?
  tasks         Task[]
  folders       Folder[]
}

model Task {
  id          String   @id @default(cuid())
  name        String
  tags        String[]
  description String
  createdDate DateTime @default(now())
  startDate   DateTime
  endDate     DateTime
  repeat      String
  timesDone   Int
  isPending   Boolean  @default(false)
  isDone      Boolean  @default(false)
  author      User     @relation(fields: [userUid], references: [id])
  userUid     String
  folderName  String?
}

model Folder {
  id String @id @default(cuid())

  name        String   @unique
  createdDate DateTime @default(now())
  
  User        User?    @relation(fields: [userId], references: [id])
  userId      String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
